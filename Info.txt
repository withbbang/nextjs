nextjs에서는 기본 정적페이지로 구성되므로
화면에서 js가 동작하는 경우에는(useEffect, useState, onClick...)
파일 상단에 "use client";를 입력해야한다.





CRA와 달리 nextjs에서 프록시 설정은
next.config.js파일의 nextConfig 안에 아래 내용을 입력해야한다.
async rewrites() {
    return [
      {
        source: "/api",
        destination: "http://localhost:8080/api",
      },
    ];
  },




server side 생명주기
1. nextJs 서버가 GET 요청을 받는다.
2. GET 요청에 맞는 pages/Component를 찾는다.
3. _app.tsx의 getInitialProps가 있다면 실행한다.
4. route에 맞는 페이지의 Component의 getStaticProps 혹은 getServerSideProps가 있다면 실행한다. pageProps들을 받아온다.
5. _document.tsx의 getInitialProps가 있다면 실행한다. pageProps들을 받아온다.
6. 모든 props들을 구성하고, _app.tsx -> page Component 순서로 렌더링
7. 모든 Content를 구성하고 _document.tsx를 실행하여 html 형태로 출력한다.

여기서, 모든 페이지에서 공통적인 데이터 패칭이 필요하면, _app.js에서 데이터 패칭을 하고, 
페이지마다 다른 데이터가 필요하면 각 페이지에서 데이터 패칭을 해주면 된다.





getInitialProps vs getStaticProps vs getServerSideProps
Next.js 9.3 이전 버전에는 getInitialProps만 사용했지만,
이후 버전부터는 getStaticProps, getStaticPath, getServerSideProps로 나누어졌다. 
모두 pre-render가 필요한 경우에만 사용하는 것이 좋다.
_app.js에서 전역 데이터 패칭이 필요한 경우 getStaticProps나 getServerSideProps는 지원하지 않기 때문에 
getInitialProps를 사용해야 한다.

getStaticProps: 빌드 시 딱 한 번만 호출, 그래서 페이지별 fetch 할 필요가 없는 경우 렌더링에 유리하다.
getServerSideProps: 요청이 들어올 때마다 호출, 진입할 때마다 다시 호출되기 때문에 빌드 이후에도 자주 바뀌게 될 동적 데이터가 들어갈 경우에 사용한다.